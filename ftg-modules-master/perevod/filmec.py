"""Get details of a series or movie.
Command: 
.tv <–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞>
.film <–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞>
  ¬© [cHAuHaN](http://t.me/amnd33p)"""

import requests
import bs4
import re
from telethon import events
from uniborg.util import *

@borg.on(events.NewMessage(outgoing=True,pattern='.film (.*)'))

@borg.on(events.MessageEdited(outgoing=True,pattern='.film (.*)'))

@borg.on(events.NewMessage(outgoing=True,pattern='.tv (.*)'))

@borg.on(events.MessageEdited(outgoing=True,pattern='.tv (.*)'))

async def imdb(e):
    if not e.text[0].isalpha() and e.text[0] not in ("/", "#", "@", "!"):
        try:
            movie_name = e.pattern_match.group(1)
            remove_space = movie_name.split(' ')
            final_name = '+'.join(remove_space)
            page = requests.get("https://www.imdb.com/find?ref_=nv_sr_fn&q="+final_name+"&s=all")
            lnk = str(page.status_code)
            soup = bs4.BeautifulSoup(page.content,'lxml')
            odds = soup.findAll("tr","odd")
            mov_title = odds[0].findNext('td').findNext('td').text
            mov_link = "http://www.imdb.com/"+odds[0].findNext('td').findNext('td').a['href']
            page1 = requests.get(mov_link)
            soup = bs4.BeautifulSoup(page1.content,'lxml')
            if soup.find('div','poster'):
              poster = soup.find('div','poster').img['src']
            else:
              poster = ''
            if soup.find('div','title_wrapper'):
              movie_title = soup.find('div','title_wrapper').findNext('h1').text
              pg = soup.find('div','title_wrapper').findNext('div').text
              mov_details = re.sub(r'\s+',' ',pg)
            else:
              mov_details = ''
            credits = soup.findAll('div', 'credit_summary_item')
            if len(credits)==1:
              director = credits[0].a.text
              writer = '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ üò¢'
              stars = '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ üò¢'
            elif len(credits)>2:
              director = credits[0].a.text
              writer = credits[1].a.text
              actors = []
              for x in credits[2].findAll('a'):
                actors.append(x.text)
              actors.pop()
              stars = actors[0]+','+actors[1]+','+actors[2]
            else:
              director = credits[0].a.text
              writer = '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ üò¢'
              actors = []
              for x in credits[1].findAll('a'):
                actors.append(x.text)
              actors.pop()
              stars = actors[0]+','+actors[1]+','+actors[2]
            if soup.find('div', "inline canwrap"):
              story_line = soup.find('div', "inline canwrap").findAll('p')[0].text
            else:
              story_line = '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ üò¢'
            info = soup.findAll('div', "txt-block")
            if info:
              mov_country = []
              mov_language = []
              for node in info:
                a = node.findAll('a')
                for i in a:
                  if "country_of_origin" in i['href']:
                    mov_country.append(i.text)
                  elif "primary_language" in i['href']:
                    mov_language.append(i.text)
            if soup.findAll('div',"ratingValue"):
              for r in soup.findAll('div',"ratingValue"):
                mov_rating = r.strong['title']
            else:
              mov_rating = '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ üò¢'
            await e.edit('<b>–ù–∞–∑–≤–∞–Ω–∏–µ : </b><code>'+mov_title+
                  '<a href='+poster+'> ‚Äè‚Äè‚Äé </a>'
                  '</code>\n<code>'+mov_details+
                  '</code>\n<b>–û—Ü–µ–Ω–∫–∏ : </b><code>'+mov_rating+
                  '</code>\n<b>–°—Ç—Ä–∞–Ω–∞ : </b><code>'+mov_country[0]+
                  '</code>\n<b>–Ø–∑—ã–∫ : </b><code>'+mov_language[0]+
                  '</code>\n<b>–†–µ–∂–∏—Å—Å—ë—Ä : </b><code>'+director+
                  '</code>\n<b>–°—Ü–µ–Ω–∞—Ä–∏—Å—Ç : </b><code>'+writer+
                  '</code>\n<b>–ó–≤—ë–∑–¥—ã : </b><code>'+stars+
                  '</code>\n<b>IMDB —Å—Å—ã–ª–∫–∞ : </b>'+mov_link+
                  '\n\n<b>–î–µ—Ä–∂–∏ –ø—ë—Å–µ–ª—è : </b> <a href="https://www.unn.com.ua/uploads/assets/images/%D0%92%D0%B5%D0%BB%D1%8C%D1%88-%D0%BA%D0%BE%D1%80%D0%B3%D0%B8%20%D0%BF%D0%B5%D0%BC%D0%B1%D1%80%D0%BE%D0%BA.jpg">–ü—ë—Å–µ–ª—å</a>'+
                  '\n\n===> –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –¥–Ω—è! <===',
                  link_preview = True , parse_mode = 'HTML'
                  )
        except IndexError:
            await e.edit("–•—å—é—Å—Ç–æ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ ** –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ / —Å–µ—Ä–∏–∞–ª–∞ **")
        except Exception as err:
            await e.edit("–•—å—é—Å—Ç–æ–Ω, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∫–∞—è –æ—à–∏–±–∫–∞:- "+str(err))
